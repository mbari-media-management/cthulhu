plugins {
    id 'application'
    id 'com.adarshr.test-logger'
    id 'com.github.ben-manes.versions'
    id 'com.github.spotbugs'
    id 'org.openjfx.javafxplugin'
    id 'org.beryx.jlink'
}

version = "1.0.3"

sourceCompatibility = 17
targetCompatibility = 17

repositories {
    mavenCentral()
    maven {
        url 'https://repo1.maven.org/maven2'
    }
    maven {
        name = "MBARI"
        url = uri("https://maven.pkg.github.com/mbari-org/maven")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}



test {
    useJUnitPlatform()
    moduleOptions {
        runOnClasspath = true
    }
    testlogger {
        theme 'mocha' // task level
    }
}

javafx {
    version = "18"
    modules = [
            'javafx.base',
            'javafx.controls',
            'javafx.graphics'
    ]
}

dependencies {
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'com.miglayout:miglayout-javafx:5.2'
    implementation 'info.picocli:picocli-shell-jline3:4.6.3'
    implementation 'io.reactivex.rxjava3:rxjava:3.1.5'
    implementation 'net.java.dev.jna:jna-platform:5.11.0'
    implementation 'org.mbari.vcr4j:vcr4j-sharktopoda-client:4.4.1.jre11'
    implementation 'org.mbari.vcr4j:vcr4j-sharktopoda:4.4.1.jre11'
    implementation 'org.slf4j:slf4j-api:2.0.0-alpha7'
    implementation 'uk.co.caprica:vlcj-file-filters:2.0.0'
    implementation 'uk.co.caprica:vlcj:4.7.3'
    runtimeOnly 'ch.qos.logback:logback-classic:1.3.0-alpha16' // 1.3.0-alpha5 does not colorize
    runtimeOnly 'org.fusesource.jansi:jansi:2.4.0'
    testCompileOnly 'junit:junit:4.13.2'
    testImplementation 'info.picocli:picocli-shell-jline3:4.6.3'
    testImplementation 'info.picocli:picocli:4.6.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.8.2'
}


/* *****************************************************************************
 Use the jlink plugin to build a dist with a JVM
 */
def runtimeJvmArgs = [
        '-Xms1g',
//        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix',
//        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=com.jfoenix',
//        '--add-exports', 'javafx.base/com.sun.javafx.binding=com.jfoenix',
//        '--add-exports', 'javafx.graphics/com.sun.javafx.stage=com.jfoenix',
//        '--add-exports', 'javafx.base/com.sun.javafx.event=com.jfoenix'
        '--add-reads', 'cthulhu.merged.module=javafx.base',
        '--add-reads', 'cthulhu.merged.module=javafx.controls',
        '--add-reads', 'cthulhu.merged.module=javafx.graphics',
        '--add-reads', 'cthulhu.merged.module=org.slf4j',
]

if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
    runtimeJvmArgs.add("-DVLCJ_INITX=no")
}

tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
        def debugJvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']
        debugJvmArgs.addAll(runtimeJvmArgs)
        jvmArgs(debugJvmArgs)
    }
}


application {
    // mainClassName = "org.mbari.cthulhu/org.mbari.cthulhu.CthulhuLauncher"
    mainClass = "org.mbari.cthulhu.CthulhuLauncher"
    applicationDefaultJvmArgs = runtimeJvmArgs
}

jlink {
    options = [
            '--bind-services',
            '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages',
    ]

    launcher {
        name = 'Cthulhu'
        jvmArgs = runtimeJvmArgs
    }

    mergedModule {
        excludeRequires 'javafx.graphics', 'javafx.base', 'javafx.controls'
    }

    jpackage {

        def customInstallerOptions = [
                "--app-version", project.version,
                "--copyright", "Monterey Bay Aquarium Research Institute",
                "--name", "Cthulhu",
                "--vendor", "org.mbari"
        ]

        if  (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            customInstallerOptions.addAll([
                "--linux-menu-group", "VARS",
                "--linux-deb-maintainer", "bschlining@gmail.com",
                "--linux-shortcut"
            ])
            imageOptions = ["--icon", "src/jpackage/macos/Cthulhu.png"]
        }
        else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            customInstallerOptions.addAll([
                "--win-upgrade-uuid", "3bfa1e7b-9d64-6107-adcb-738b71826967",
                "--win-menu-group", "VARS",
                "--win-menu"
            ])
        }
        else {
            installerType = "dmg"
            customInstallerOptions.addAll([
                    "--mac-package-name", "Cthulhu",
                    "--mac-package-identifier", "org.mbari.Cthulhu"
            ])
            imageOptions = ["--icon", "src/jpackage/macos/Cthulhu.icns"]

             /*
                This is usually something like "Developer ID Application: My Awsome Org (0AB1C234D5)". The codesigner app uses the 
                whole name, includeing "Developer ID Application", but jpackage only wants the section AFTER that. This section of
                code handles either case and munges if needed to a jpackage friendly form.
             */
            def user = System.getenv("MAC_CODE_SIGNER")
            def marker = "Developer ID Application:"
            if (user.startsWith(marker)) {
                user = user.substring(marker.length() + 1)
            }
            if (user) {
                def homeDir = System.getenv("HOME")
                customInstallerOptions.addAll([
                    "--mac-sign",
                    "--mac-signing-key-user-name", user,
                    "--mac-signing-keychain", "$homeDir/Library/Keychains/login.keychain-db"
                ])
            }
        }
        installerOptions = customInstallerOptions
    }

}


// tasks.jpackageImage.doLast {
//     if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
//         def signer = System.getenv("MAC_CODE_SIGNER")
//         if (signer) {
//             exec {
//                 println("MACOSX: Signing application")
//                 workingDir "build/jpackage"

//                 executable "codesign"

//                 args "--entitlements", "${projectDir}/src/jpackage/macos/java.entitlements",
//                   "--options", "runtime", "--deep", "-vvv", "-f", "--sign", signer, 
//                   "Cthulhu.app"
//             }
//         }
//     }
// }

task tree(type: DependencyReportTask) {}

spotbugs {
    ignoreFailures = true
}


// -- Filter resources exactly like was done in the Maven project.
class MyProject {
    String artifactId
    String version
    MyProject(String artifactId, String version) {
        this.artifactId = artifactId
        this.version = version
    }
}

processResources {
    filesMatching("**/*.json") {
        expand("project": new MyProject(name, version),
                "timestamp": java.time.Instant.now())
//            expand("artifactId": name,
//            "version": version,
//            "timestamp": java.time.Instant.now())
    }

}


